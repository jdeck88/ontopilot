
#
# Manages the process of building import module OWL files from source
# ontologies and terms tables.
#

# Python imports.
import os
from tablereaderfactory import TableReaderFactory
from tablereader import TableRowError
from importmodulebuilder import ImportModuleBuilder
from ontobuilder import TRUE_STRS
from rfc3987 import rfc3987


# Required columns in terms files.
REQUIRED_COLS = ('Termsfile', 'IRI')

# Optional columns in terms files.
OPTIONAL_COLS = ('Ignore',)


class ImportsBuildManager:
    def __init__(self, config):
        """
        config: An OntoConfig instance.
        """
        self.config = config

        # The string builddir is the path to a build directory where, at a
        # minimum, source ontologies can be cached.  If we are doing an
        # out-of-source build, this will also be the location for the compiled
        # imports modules, specified by outputdir.  For in-source builds,
        # outputdir will be the final destination for the imports modules.
        self.builddir = config.getBuildDir()
        if config.getDoInSourceBuilds():
            self.outputdir = config.getImportsDir()
        else:
            self.outputdir = self.builddir

    def _checkFiles(self):
        """
        Verifies that all files and directories needed for the build exist.
        """
        # Verify that the top-level imports file exists.
        fpath = self.config.getTopImportsFilePath()
        if not(os.path.isfile(fpath)):
            raise RuntimeError(
                'The top-level imports source file could not be found: {0}.'.format(fpath)
            )
        
        # Verify that the build directory exists.
        if not(os.path.isdir(self.builddir)):
            raise RuntimeError(
                'The build directory does not exist: {0}.'.format(self.builddir)
            )

        # Check the imports directory if we are doing an in-source build.
        if self.config.getDoInSourceBuilds():
            if not(os.path.isdir(self.outputdir)):
                raise RuntimeError(
                    'The destination directory does not exist: {0}.'.format(self.builddir)
                )

    def _getAbsTermsFilePath(self, trow):
        """
        Gets the absolute path to a terms file from an input table row.

        trow: An input table row.
        """
        termsfile_path = trow['Termsfile']

        # Verify that a terms file was provided.
        if termsfile_path == '':
            raise TableRowError(
                'No input terms file was provided.  Check the value of the "Termsfile" column.',
                trow
            )

        # If the termsfile path is a relative path, convert it to an absolute
        # path using the location of the top-level imports file as the base.
        if not(os.path.isabs(termsfile_path)):
            topfilepath = self.config.getTopImportsFilePath()
            termsdir = os.path.dirname(os.path.abspath(topfilepath))
            termsfile_path = os.path.join(termsdir, termsfile_path)

        # Verify that the terms file exists.
        if not(os.path.isfile(termsfile_path)):
            raise TableRowError(
                'Could not find the input terms file "{0}".'.format(termsfile_path),
                trow
            )

        return termsfile_path

    def _checkSourceIRI(self, trow):
        """
        Verifies that the source IRI string in an input table row (in the 'IRI'
        field) is a valid IRI.  Raises an exception if it is invalid.
        """
        # Verify that the source IRI is valid.
        if rfc3987.match(trow['IRI'], rule='absolute_IRI') == None:
            raise TableRowError(
                'Invalid source ontology IRI string: {0}.'.format(trow['IRI']),
                trow
            )

    def getImportsIRIs(self):
        """
        Returns a list of the IRIs for all import modules defined for the
        ontology (that is, import modules that are (or will be) generated by
        the import module build process).
        """
        self._checkFiles()

        mbuilder = ImportModuleBuilder(
                        self.config.getModulesBaseIRI(),
                        self.config.getImportModSuffix(), self.builddir,
                        self.outputdir
                    )
        
        ifpath = self.config.getTopImportsFilePath()

        mIRIs_list = []
        with TableReaderFactory(ifpath) as ireader:
            for table in ireader:
                table.setRequiredColumns(REQUIRED_COLS)
                table.setOptionalColumns(OPTIONAL_COLS)

                for row in table:
                    if not(row['Ignore'].lower() in TRUE_STRS):
                        self._checkSourceIRI(row)
                        mIRIs_list.append(mbuilder.getModuleIRIStr(row['IRI']))

        return mIRIs_list

    def build(self):
        """
        Runs the imports build process and produces import module OWL files.
        """
        self._checkFiles()

        mbuilder = ImportModuleBuilder(
                        self.config.getModulesBaseIRI(),
                        self.config.getImportModSuffix(), self.builddir,
                        self.outputdir
                    )
        
        ifpath = self.config.getTopImportsFilePath()

        with TableReaderFactory(ifpath) as ireader:
            for table in ireader:
                table.setRequiredColumns(REQUIRED_COLS)
                table.setOptionalColumns(OPTIONAL_COLS)
            
                for row in table:
                    if not(row['Ignore'].lower() in TRUE_STRS):
                        self._checkSourceIRI(row)

                        termsfile_path = self._getAbsTermsFilePath(row) 
                
                        if mbuilder.isBuildNeeded(row['IRI'], termsfile_path):
                            print ('Building the ' + row['name'] + ' (' + row['IRI']
                                    + ') import module.')
                            mbuilder.buildModule(row['IRI'], termsfile_path)
                        else:
                            print ('The ' + row['name'] + ' (' + row['IRI']
                                    + ') import module is already up to date.')

