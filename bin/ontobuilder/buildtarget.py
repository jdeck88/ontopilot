#
# Provides high-level management of the imports and ontology build process by
# providing a framework for implementing discrete build targets.  Each build
# target is a concrete subclass of the abstract base class BuildTarget, which
# is defined in this module.  Targets can be linked together in dependency
# relationships, and build products from dependencies are (optionally) passed
# up the dependency chain to their dependent targets so that high-level build
# targets can directly use the results of low-level build targets.
#

# Python imports.
import abc

# Java imports.


class BuildTarget:
    """
    An abstract base class for all concrete build target classes.
    """
    def __init__(self):
        # This is an abstract base class.
        __metaclass__ = abc.ABCMeta

        # A list of references to the build targets on which this build target
        # depends.
        self.dependencies = []

        # A dictionary to accumulate the build products generated by the build
        # targets on which this target depends.
        self.products = {}

    def addDependency(self, target):
        """
        Adds a dependency for this build target.
        """
        self.dependencies.append(target)

    def isBuildRequired(self):
        """
        Determines if the build task needs to be run.  Inspects the state of
        all dependencies as well as this build target.  If any dependencies
        require a build, than this method will automatically return True.
        """
        for dependency in self.dependencies:
            if dependency.isBuildRequired():
                return True

        return self._isBuildRequired()

    def run(self):
        """
        Runs this build task.  All dependencies are processed first.  If the
        build task fails, an appropriate exception should be thrown, and
        exceptions should be allowed to "bubble up" through the dependency
        chain so they can be properly handled by external client code.
        """
        # Invalidate any previous build products.
        self.products.clear()

        for dependency in self.dependencies:
            results = dependency.run()

            # Merge the results with the products dictionary, making sure we
            # don't have any duplicate keys.
            for key in results:
                if key not in self.products:
                    self.products[key] = results[key]
                else:
                    raise RuntimeError(
                        'Unable to merge product returned from build target \
{0} into the build products set for build target {1} because of a duplicate \
product name key: "{2}".'.format(
                            dependency.__class__.__name__, self.__class__.__name__, key
                        )
                    )

        # Run the build task for this target.
        results = self._run()
        if results == None:
            results = {}

        # Merge the results of this build target with the products accumulated
        # from lower-level build targets, again making sure we don't have any
        # duplicate keys.
        for key in results:
            if key not in self.products:
                self.products[key] = results[key]
            else:
                raise RuntimeError(
                    'A build product from build target {0} could not be \
merged into the build products set because it uses a product name key that \
duplicates one of its dependency\'s product name keys: "{1}".'.format(
                        self.__class__.__name__, key
                    )
                )

        return self.products
    
    def getBuildNotRequiredMsg(self):
        """
        Returns a string with a target-appropriate message to indicate that
        running the build process is not required.  This can be overridden by
        child classes to provide helpful information for user interfaces.
        """
        return ''

    @abc.abstractmethod
    def _isBuildRequired(self):
        """
        This method must be implemented by child classes.  It should return
        True if a build is required, False otherwise.
        """
        pass

    @abc.abstractmethod
    def _run(self):
        """
        Runs the build task for this particular build target.  This method must
        be implemented by child classes.  When this method is invoked, all
        build targets on which this target depends will have already been run,
        and the results will be in the dictionary self.products.  This method
        should return a dictionary (which may be empty) of build products.
        Alternatively, the method can return None (or have no return statement)
        if no build products need to be passed up the dependency chain.
        """
        return {}

