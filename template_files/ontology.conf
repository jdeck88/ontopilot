#
# The settings in this file configure the ontology build process.  Most
# ontology projects will only need to customize the values of the two variables
# in the "Main" section, immediately below.
#


[IRIs]
#--------
# Settings for customizing IRI management.
#
# IMPORTANT: Virtually all projects will eventually need to customize the
# "dev_base_IRI" and "release_base_IRI" settings in this section.  However,
# none of these are required to get started with a new ontology project.
#--------

# The base IRI for compiled, non-released ontology documents and imports
# modules.  This can be either an IRI pointing to a folder on the local
# filesystem, or an IRI pointing to a folder at a remote location (e.g., a
# remote git repository).  Unless you are using an unusual project layout, this
# folder should correspond with the main project folder.  The value of this
# setting will be used to form the complete IRIs for generated ontology files
# and imports modules.  For example, if dev_base_iri is
# "http://dev.location/for/project/", then a compiled ontology file would have
# an IRI like "http://dev.location/for/project/ontology/demo-merged.owl".  If
# this setting is undefined, then a suitable base IRI will be generated from
# the project path in the local file system.
dev_base_IRI = 

# The base IRI for released versions of the ontology documents and imports
# modules.  As with dev_base_IRI, the release base IRI should usually point to
# a location that corresponds with the main project folder.  The value of this
# setting is used in the same manner as dev_base_IRI.  So, for example, if
# release_base_iri is "http://release.location/for/project/", then a compiled
# ontology file would have an IRI like
# "http://release.location/for/project/demo-merged.owl", and it would have a
# version IRI like
# "http://release.location/for/project/releases/YYYY-MM-DD/demo-merged.owl".
# If this setting is undefined, then the value of dev_base_IRI will be used.
release_base_IRI =

# The IRI of released versions of the main ontology document, if it needs to be
# different from that specified by release_base_IRI.  If this setting is
# undefined, the value of release_base_IRI will be used to generate a suitable
# IRI.
release_ontology_IRI =


[Ontology]
#--------
# Settings for customizing ontology compilation.  Note that relative file paths
# will be interpreted relative to the location of this configuration file.
#
# IMPORTANT: Virtually all projects will eventually need to customize the
# "ontology_file" and "termsfiles" settings in this section.  However,
# "ontology_file" is the only setting that is absolutely required to build an
# ontology.
#--------

# The local location and base name of the compiled ontology OWL file
# (REQUIRED).  This file name will be modified depending on the features of the
# compiled ontology file, and it will also be used for released ontology files.
# For example, if ontology_file is "ontology/demo.owl", compiled ontology files
# will have names like "ontology/demo-raw.owl", "ontology/demo-merged.owl",
# etc.  Can be either a relative or an absolute path.  Either way, it must be
# located inside of the main project folder (as determined by the location of
# the project configuration file).
ontology_file = 

# Ontology terms source files.  These are the names of the terms source files
# that should be compiled into the final ontology, specified as a
# comma-separated list. Shell-style wildcards are supported.  As long as your
# project follows the suggested folder structure, you only need to provide the
# names of the files here, not full filesystem paths.  If your source files are
# in a non-standard location, you can set the value of the variable "termsdir",
# below, to specify the folder in which the source files are located.
#
# Example: termsfiles = ont_main_classes.xlsx, ont_extra_classes.xlsx, ont_properties.ods
# Example: termsfiles = *_classes.xlsx, ont_properties.ods
#
termsfiles = 


#--------
# NOTE: You should not need to modify anything else in the rest of this
# configuration file unless you have a non-standard source structure (e.g., you
# are not following the suggested directory structure), or you want to modify
# the build process (e.g., change from in-source to out-of-source builds or
# customize reasoner parameters).
#--------

# The location and name of the base ontology file.  By default, the location
# will be inferred from the path to the project configuration file and the file
# name will be generated from the ontology file name.  For example, if the
# ontology file name is "ppo.owl", the base ontology file will be called
# "ppo-base.owl".  If you have a non-standard project folder structure or
# source naming conventions, you might need to customize the value of this
# variable.  Can be either a relative or an absolute path.
#
# Example: base_ontology_file = src/ontology-base.owl
#
base_ontology_file = 

# The location of the ontology entities/terms source files.  Be default, the
# location will be inferred from the location of this configuration file.  Can
# be either a relative or an absolute path.
#
# Example: termsdir = src/terms
#
termsdir = 


[Reasoning]
#--------
# Settings for customizing the process of running a reasoner to add inferred
# axioms to the compiled ontology.
#--------

# The reasoner to use when generating inferred ontology axioms.  Currently,
# "ELK" and "HermiT" are the two supported options.  If no reasoner is
# specified, HermiT will be used by default.  This setting is not case
# sensitive (e.g., either "HermiT" or "hermit" is fine.)
reasoner = HermiT

# The kinds of inferred axioms to generate when running a reasoner on an
# ontology.  This should be a comma-separated list of one or more of the
# following values:
#
#   "subclasses" (infer the class hierarchy)
#   "subdata properties" (infer the data property hierarchy)
#   "subobject properties" (infer the object property hierarchy)
#   "types" (infer individual types / class assertions)
#   "equivalent classes" (infer class equivalency axioms)
#   "disjoint classes" (infer class disjointness axioms)
#   "inverse object properties" (infer object property inverse relationships)
#   "property values" (infer property assertions for individuals)
#
# If no inference types are specified, the default is
# "subclasses, equivalent classes, types, subdata properties, subobject properties".
# This setting is not case sensitive (e.g., either "types" or "Types" is fine).
inferences = subclasses, equivalent classes, types, subdata properties,
             subobject properties

# If True, inferred axioms will be annotated as such when they are added to the
# compiled ontology.  If False or undefined, inferred axioms will not receive
# any annotations to indicate that they were inferred.
annotate_inferred = False


[Build]
#--------
# Settings for customizing the build process for both import modules and the
# main ontology.  Note that relative file paths will be interpreted relative to
# the location of this configuration file.
#--------

# If True, the build system will do in-source builds, which means that all
# compiled files will be written directly to their final locations in the
# project.  If False or undefined, then all compiled files will be written to a
# separate build directory and will then need to be moved to their final
# locations by hand.
insource_builds = True

# The location of the build directory.  All output files will be written to
# this directory.  If the directory does not exist, it will be created as part
# of the initial build process.  By default, the build directory will be called
# "build" and will be located in the same place as this configuration file.
# Can be either a relative or an absolute path.
builddir = 


[Imports]
#--------
# Settings for customizing the import module build process.  Note that relative
# file paths will be interpreted relative to the location of this configuration
# file.
#--------

# The location of the source files for the import modules.  By default, this
# will be inferred from the location of this configuration file, but you can
# customize it here if your project does not follow the standard folder
# structure.  Can be either a relative or an absolute path.
#
# Example: imports_src = src/imports
#
imports_src = 

# The location of the compiled import modules.  By default, this will be
# inferred from the location of this configuration file, but you can customize
# it here if your project does not follow the standard folder structure.  Can
# be either a relative or an absolute path.  Either way, it must be located
# inside of the main project folder (as determined by the location of the
# project configuration file).
#
# Example: imports_dir = imports
#
imports_dir = 

# The location and name of the top-level imports source file.  This is the file
# that lists the ontologies from which terms should be imported.  By default,
# the first file in the imports source folder that matches the pattern
# "imported_ontologies.*" will be used.  If no matching file is found,
# "imported_ontologies.csv" will be used.  Can be either a relative or an
# absolute path.
#
# Example: top_importsfile = src/imports/imported_ontologies.csv
#
top_importsfile = 

# The base IRI to use when generating IRIs for the import module OWL files.  By
# default, a suitable base IRI will be generated from the main ontology IRI,
# but this is only possible if the path in the ontology IRI follows the project
# folder layout.  Otherwise, a base IRI for the modules will need to be
# explicitly provided.  The base IRI should be chosen so that the generated
# IRIs will resolve to actual file locations.  For example, you could set this
# to a path on the local filesystem, or even better, the base IRI for accessing
# the modules on a public source repository (e.g., on Github).
mod_baseIRI = 

# The suffix to use for naming the import module OWL files.  By default, this
# will be generated from the name of the main ontology file.  For example, if
# the ontology file is "ppo.owl", the import module files will be named
# "*_ppo_import_module.owl".
import_mod_suffix = 

